
strategy:
  matrix:
    linux:
      imageName: 'ubuntu-16.04'
    mac:
      imageName: 'macos-10.13'
    windows:
      imageName: 'vs2017-win2016'

pool:
  vmImage: $(imageName)

trigger:
- master

steps:
# - task: UsePythonVersion@0
#   inputs:
#     versionSpec: '3.7'
#     architecture: 'x64'

# - script: python -m pip install -r requirements.txt
#   displayName: 'Install dependencies'
#

- script: git submodule init && git submodule update
  displayName: 'Load git submodules'

- task: MSBuild@1
  displayName: 'Build (Windows)'
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  inputs:
    solution: 'win/irig106.sln' 

# - script: C:/Program Files (x86)/Microsoft Visual Studio/2017/BuildTools/MSBuild/15.0/Bin/msbuild.exe win/irig106.sln
#   displayName: 'Build (Windows)'
#   condition: eq( variables['Agent.OS'], 'Windows_NT' )

- script: win/x64/Debug/tests.exe
  displayName: 'Run tests (Windows)'
  condition: eq( variables['Agent.OS'], 'Windows_NT' )

- script: make
  displayName: 'Build (Unix)'
  condition: ne( variables['Agent.OS'], 'Windows_NT' )

- script: make test
  displayName: 'Run tests'
  condition: ne( variables['Agent.OS'], 'Windows_NT' )

# - task: PublishTestResults@2
#   inputs:
#     testResultsFormat: 'JUnit'
#     testResultsFiles: '**/test-results.xml'
#     testRunTitle: 'Python $(python.version)'
#   condition: succeededOrFailed()

# - task: PublishPipelineArtifact@0
#   displayName: 'Publish binary'
#   inputs:
#     artifactName: 'witdb'
#     targetPath: 'dist/witdb.exe'

# - script: python -m pip download -r requirements.txt -d ./deps
#   displayName: 'Download dependencies'

# - task: ArchiveFiles@2
#   displayName: 'Zip dependencies'
#   inputs:
#     rootFolderOrFile: 'deps' 
#     includeRootFolder: true 
#     archiveType: 'zip'
#     archiveFile: 'deps.zip' 
#     replaceExistingArchive: true 

# - task: PublishPipelineArtifact@0
#   displayName: 'Publish dependencies'
#   inputs:
#     artifactName: 'dependencies'
#     targetPath: 'deps.zip'
